# COMP30820 - Java Programming (Conversion)

## Deliverable: Project Deliverable 2 _ Initial Class Design

### Group Name: - -

### Group Members:
- Hieu Le
- Mohammed Alsaqqa
- Niall Mahon
- Brian Cushen

## Description:
The following document provides preliminary details of the classes intended for use in the design of the Shared Mobility Adventure Game for the Final Project of COMP30820. Class details include associated class methods and instance variables. Note that the classes, methods, and variables described and their relationships may be subject to change during project progression.

## Class Details:a

### Class - CityMap:
- **Purpose**: Represents the virtual city map where the game unfolds, including zones, landmarks, and transportation routes.
- **Methods**:
 - `generateMap()`: Generates the city map layout based on the level of difficulty.
 - `displayMap()`: Renders the city map on the screen, using data generated by `generateMap()`.
- **Variables**:
 - `zone`: Represents different areas of the city map, each with its own characteristics and rules.
 - `landmark`: An array of landmark objects placed around the city map for players to interact with.
 - `route`: Represents the transportation routes available in the city, including paths and modes of transport.

### Class - Player:
- **Purpose**: Manages the player's progress, interactions, and decision-making within the game.
- **Methods**:
 - `move()`: Allows the player to move to different locations on the city map.
 - `collectGem()`: Collects a gem from the city map and updates the player's inventory.
- **Variables**:
 - `name`: The player's name.
 - `score`: The player's current score, reflecting their performance in the game.
 - `inventory`: An array of gem objects collected by the player.
 - `currentLocation`: The player's current location on the city map, represented as an array of x and y coordinates.

### Class - RouteOption:
- **Purpose**: Represents the different route options available to the player, including the mode of transport and associated attributes.
- **Methods**:
 - `calculateCarbonFootprint()`: Calculates the carbon footprint of the route based on the mode of transport.
 - `calculateTravelTime()`: Estimates the travel time for the route.
- **Variables**:
 - `transportationModes`: An array of transportation modes available for the route.
 - `carbonFootprint`: The estimated carbon footprint of the route.
 - `travelTime`: The estimated travel time for the route.

### Class - Gem:
- **Purpose**: Represents a gem object that players can collect during the game.
- **Methods**:
 - `spawn()`: Places a gem on the city map at a random location.
 - `remove()`: Removes a collected gem from the city map.
- **Variables**:
 - `location`: The location of the gem on the city map.
 - `value`: The value of the gem, which affects the player's score.

### Class - Level:
- **Purpose**: Manages the setup and completion of game levels, including objectives, challenges, and rewards.
- **Methods**:
 - `startLevel()`: Initializes a new level with its objectives and challenges.
 - `completeLevel()`: Completes a level and calculates the player's score based on the level's objectives.
- **Variables**:
 - `objectives`: The objectives that the player must achieve to complete the level.
 - `carbonFootprintThreshold`: The maximum carbon footprint allowed for the level.
 - `levelMap`: The city map configuration for the level.

### Class - Game:
- **Purpose**: Manages the overall flow of the game, including starting, pausing, and ending the game, as well as handling player input and interactions.
- **Methods**:
 - `startGame()`: Starts the game and initializes the first level.
 - `pauseGame()`: Pauses the game, allowing the player to resume later.
 - `endGame()`: Ends the game, finalizing the player's score and achievements.
 - `handleInput()`: Processes player input during the game.
- **Variables**:
 - `currentPlayer`: The player currently playing the game.
 - `currentLevel`: The current level being played.
 - `gameSettings`: The game's settings, such as difficulty level and sound options.

### Class - Score Calculator:
- **Purpose**: Calculates the player's score based on their actions and achievements during gameplay.
- **Methods**:
 - `calculateScore()`: Calculates the player's score based on various factors like gems collected, time taken, and carbon footprint.
- **Variables**:
 - `scoringFactors`: The factors used to calculate the player's score, such as the number of gems collected, time taken to complete levels, and carbon footprint.

### Class - EnvironmentalEvent:
- **Purpose**: Represents random environmental events that can occur during gameplay, impacting transportation routes and player decisions.
- **Methods**:
 - `triggerEvent()`: Triggers an environmental event, affecting the game's dynamics.
- **Variables**:
 - `eventTypes`: Different types of environmental events that can occur.

### Class - AchievementTracker:
- **Purpose**: Tracks and rewards player achievements and milestones reached during gameplay.
- **Methods**:
 - `trackAchievements()`: Monitors the player's progress towards achievements.
 - `displayAchievements()`: Displays the player's achievements to them.
- **Variables**:
 - `achievementsList`: A list of achievements that the player can earn during the game.
